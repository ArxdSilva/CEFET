OOP - Oriented object programming

  1.  Everything is object
  2.  Program = objects interacting through msgs
  3.  Object has own memory
  4.  object has a type
  5.  same type can get same msgs


  object = Encapsulation of data
    |> identity
    |> state, characteristics
    |> behavior

  object = Instancia de uma (classe) tipo abstrato
  tipo abstrato: implemented via class.

  ADT (abstract data type):
    - colecao de objetos/valores e metodos correspondentes
    - Encapsula a representacao de dados e os faz acessiveis a niveis maiores de abstracao.

  Class:
      Descricao de propriedades comuns de alguns objetos.

  Object:
      Representacao das propriedades de uma instancia.

*Instantiating:
    - mecanismo de criacao de objetos a partir de uma classe.

    - Sempre engloba a alocacao de dados para o objeto.

    - Mecanismo onde os objetos recebem estados iniciais.

____________________________________
Testes:
  preparar
  executar
  testar

____________________________________

Classe: Molde
objeto: Agente ativo
Metodo: capacidade de acao do agente
Atributo: Caracteristica do agente

Classe: Humorista
objeto: Fabio Porchat
Metodo: Piadas
Atributo: magro, 36 anos

__init__ = construtor da classe
            Geralmente faz a iniciacao do codigo

self = referencia para a propria instancia da classe definida no construtor __init__.

self (init) => referencia o objeto criado recentemente, em outros metodos referencia a instancia de onde o metodo foi chamado.

Acesso a metodos e atributos
  objeto.atributo

Atributos
  Todos os dados dentro de uma classe sao atributos, exceto os metodos.
    Privados (__private):
      atributos/metodos so podem ser acessados dentro da classe

    Protected (_protected):
      "don’t touch this, unless you’re a subclass"

    De instancia:
      Variaveis que pertencem a uma instancia da classe
      cada instancia tem seu proprio valor ao atributo
      -> Criado e inicializado pelo metodo __init__

    Atributo de classe:
      variaveis da classe,
      Todas as instancias da classe compartilham o mesmo atributo
      'estaticos'

Heranca:
  Classes podem herdar definicoes de outras classes
    Nova classe sera uma SUBCLASSE, original sera SUPERCLASSE (pai, ancestral)
    Suporta multipla heranca

  EXEMPLO:
    class Veiculo:
      pass
    class carro(Veiculo)
      n_rodas = 4

Membros   Nativos:
  Todos os membros nativos tem 2 underscores ao redor dos nomes: __init__ , __doc__
  Algums atributos nativos definem informações que devem ser armazenadas para todas as classes.
  __init__  :  O construtor da classe
  __cmp__:  Define como == funciona para a classe
  __len__ :  Define como len(obj) funciona
  __copy__ : Define como copiar uma classe

  ESPECIAIS:
    __doc__  :  Armazena a documentação (string) para a classe.
    __class__:  Retorna a referência à classe de qualquer instância dela.
    __module__ :  Retorna a referência ao módulo que aquela classe em particular foi definida.

EXCECOES:
  try/except:
    interrompe o programa, suporta diversas excecoes
    ex: except(RuntimeError, TypeError, NameError, (...))

  raise:
    Caso nao queira que um bloco de codigo trate uma excessao, chama-se a parte do codigo em que a excecao é tratado.

  finally:
    Tenta resolver o erro, antes de parar o codigo.
    Executado ao final do try

    
