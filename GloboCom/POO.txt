OOP - Oriented object programming

  1.  Everything is object
  2.  Program = objects interacting through 'msgs'
  3.  Object has own memory
  4.  Object has a type *
  5.  Same type can get same msgs


  object = Encapsulation of data
    |> identity
    |> state, characteristics
    |> behavior

  Encapsulamento: protecao dos atributos ou metodos de uma classe.
  objeto: Instancia de uma classe de tipo abstrato

  Polimorfismo
    Refers to the ability of an object to adapt the code to the type of the data it is processing.
       1- An object may provide different implementations of one of its methods depending on the type of the input parameters.
       (exemplo no arquivo)

        2- Code written for a given type of data may be used on data with a derived type, that is, methods understand the class hierarchy of a type.

  ADT (abstract data type):
    - colecao de objetos/valores e metodos correspondentes
    - Encapsula a representacao de dados e os faz acessiveis a niveis maiores de abstracao.

  Class:
      Descricao de propriedades comuns de alguns objetos.

  Object:
      Representacao das propriedades de uma instancia.

  Instanciacao:
    - mecanismo de criacao de objetos a partir de uma classe.
    - Sempre engloba a alocacao de dados para o objeto.
    - Mecanismo onde os objetos recebem estados iniciais.

  Classe: Molde
  objeto: Agente ativo
  Metodo: capacidade de acao do agente
  Atributo: Caracteristica do agente
----------------------------------------=
  Classe: Humorista
  objeto: Fabio Porchat
  Metodo: contarPiadas
  Atributo: body_shape(magro), age(36 anos)
_____________________________________________

__init__ = construtor da classe
            Geralmente faz a iniciacao do codigo

self = referencia para a propria instancia da classe definida no construtor __init__.

self (init) => referencia o objeto criado recentemente, em outros metodos referencia a instancia de onde o metodo foi chamado.
    __init__(self):
      self.nome = nome
    def sayName(self):
      self.nome = 'Fabricio'
      print self.nome


Atributos

  Sao objetos inerentes as classes, comuns a todas as suas instancias.As caracteristicas que todas as instancias dessas classes possuem sao seus atributos.

    Privados (__private):
      atributos/metodos so podem ser acessados dentro da classe

    Protected (_protected):
      "don’t touch this, unless you’re a subclass"

    Acesso a metodos e atributos
      objeto.atributo

    De instancia:
      Variaveis que pertencem a uma instancia da classe
      cada instancia tem seu proprio valor ao atributo
      -> Criado e inicializado pelo metodo __init__

    EXEMPLO:
      class Galinha:
        alimento='grao'
        patas=2

    atributos serao (alimento,patas)

Heranca:
  Classes podem herdar definicoes de outras classes
    Nova classe sera uma SUBCLASSE, original sera SUPERCLASSE (pai, ancestral)
    Suporta multipla heranca

  EXEMPLO:
    class Veiculo:
      pass
    class carro(Veiculo):
      n_rodas = 4
    class smart(Veiculo, carro):
      comprimento = 2

Membros   Nativos:
  Todos os membros nativos tem 2 underscores ao redor dos nomes: __init__ , __doc__
  Algums atributos nativos definem informações que devem ser armazenadas para todas as classes.

  __init__:  O construtor da classe, define os atributos e metodos para uma instancia quando for criada
  __cmp__:  Define como == funciona para a classe
  __len__ :  Define como len(obj) funciona
  __copy__: Define como copiar uma classe

  ESPECIAIS:
    __doc__:  Armazena a documentação (string) da classe.
    __class__:  Retorna a referência à classe de qualquer instância dela.
    __module__ :  Retorna a referência ao módulo que aquela classe em particular foi definida.

EXEMPLO:
    class Fausto:
      """apresentador"""

    >>> print Fausto.__doc__
        apresentador


EXCECOES:
  try/except:
    interrompe o programa, suporta diversas excecoes
    ex: except(RuntimeError, TypeError, NameError, (...))

  raise:
    Caso nao queira que um bloco de codigo trate uma excessao, chama-se a parte do codigo em que a excecao é tratado.

  finally:
    Tenta resolver o erro, antes de parar o codigo.
    Executado ao final do try
